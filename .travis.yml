# .travis.yml file based on:
# https://gist.github.com/dan-blanchard/7045057

language: python
python:
  - "3.6"
env:
  - CONDA_TYPE=miniconda CONDA_VERS=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
  - CONDA_TYPE=miniconda CONDA_VERS=https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh

# Ok -- back-track to this rendering -- late 25 Jan
addons:
  apt:
    packages:
    #- libusb-1.0-0-dev
    #
    # - update It auto-updates don't need to cite that.
    - build-essential
    - libusb-1.0-0-dev
    - libhidapi-libusb0

install:
  # Setup anaconda. See http://conda.pydata.org/docs/travis.html
  - echo "Using $CONDA_TYPE"
  - wget $CONDA_VERS -O miniconda.sh
  - bash miniconda.sh -h | sed '4q;d'
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - export BBN_DB="$PWD/bbn.sqlite"
  - echo "Database file at $BBN_DB"
  #
  # Note -- Miniconda3 installs python version 3.7.1 (not git-lfs install logic)
  # - which python; python --version
  # Update the package descriptions and install libusb
  #- sudo apt update
  #
  - which gcc; gcc --version
  #- sudo apt-get update
  # Sigh -- The following appears to try and overwrite it as a complete workstation
  # (way too big and then fails in the end)
  # - sudo apt-get -y upgrade --allow-unauthenticated
  # On the off chance that we're missing the underlying dev tools (after having updated it)
  # Debian's flavor (where yum groupinstall "Development Tools" on Centos)
  #- which gcc; gcc --version
  #- sudo apt install build-essential
  # - sudo apt-get install build-essential
  #- which gcc; gcc --version
  #
  # Prep for git-lfs
  # Ouch -- I changed directory and didn't switch it back
  # Commenting out git-lfs segment for now -- usb should NOT depend on it
  #- pushd .; cd ~; mkdir GitWork; cd GitWork; pwd
  #- curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh |  sudo bash
  #- sudo apt install git-lfs
  #- which git-lfs; git-lfs --version
  #- popd
  # Other builds render the awg file -- this make any diffeence IMI -- NO
  # - mkdir /tmp/awg
  #- sudo apt install libusb-1.0-0
  #- sudo apt install libusb-1.0-0-dev
  # Does the following give us libusb0 imi
  #- sudo apt install libhidapi-libusb0
  - apt search libusb
  - apt list libusb-1.0-0
  - apt list libhidapi-libusb0
  #
  # Sadly this Linux varient does not appear to have any sort of libopenusb library
  # (which may be relate to introspecting all the instrument dependencies IMI)
  # - sudo apt install libopenusb-dev
  # - apt search openusb
  #
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  # Create conda environment with dependencies
  #- conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy scipy matplotlib h5py pandas networkx cffi bokeh jupyter psutil sqlalchemy
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy scipy matplotlib h5py pandas networkx cffi bokeh jupyter psutil sqlalchemy future pydot
  - source activate test-environment
  - export GIT_LFS_SKIP_SMUDGE=1
  - pip install git+https://github.com/BBN-Q/bbndb.git
  - pip install git+https://github.com/BBN-Q/Adapt.git
  - pip install git+https://github.com/BBN-Q/QGL.git@sqlalchemy
  - pip install tqdm pyvisa coveralls scikit-learn pyusb
  - export GIT_LFS_SKIP_SMUDGE=0
  - export PYTHONPATH=$PYTHONPATH:$PWD/src

script:
  # Skipping global discovery case, for now (to see if it changes direct call results).
  # - coverage run -m unittest discover -v test
  #
  # Aside -- the pushd . cited above revealed the source location.
  - echo ''; echo "Trying direct, singular, invocations:"
  # - ls -l ~/build/BBN-Q/Auspex
  #
  # what if we pip install the AUspex source?
  - pip install -e ~/build/BBN-Q/Auspex
  #
  - ls -l ~/build/BBN-Q/Auspex/test
  #- python -m unittest test/test_*.py -v
  #
  # Seg faults
  #- python -m unittest ~/build/BBN-Q/Auspex/test/test_adapt_1d.py -v
  # make it very noisy
  - export PYUSB_DEBUG_LEVEL=debug
  - python -v -m unittest ~/build/BBN-Q/Auspex/test/test_adapt_1d.py -v
  #
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_average.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_bitfields.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_buffer.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_correlator.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_experiment.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_fits.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_instrument.py -v
  #
  # Stalls for unsupported Synchronized and int
  #- python -m unittest ~/build/BBN-Q/Auspex/test/test_pipeline.py -v
  #- python -m unittest ~/build/BBN-Q/Auspex/test/test_pulsecal.py -v
  #
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_singleshot_filter.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_sweeps.py -v
  - python -m unittest ~/build/BBN-Q/Auspex/test/test_write.py -v

after_script:
  - coveralls

# necessary to run on new container-based infrastructure
sudo: false

cache:
  directories:
    - $HOME/download
    - $HOME/.cache/pip
