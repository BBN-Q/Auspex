# Comment delta to trigger Travis CI build over unchanged branch logic.

# .travis.yml file based on:
# https://gist.github.com/dan-blanchard/7045057

# Original derivation notes, above, deriving docker image references from
# the following: 
# https://giorgos.sealabs.net/build-and-test-against-docker-images-in-travis.html
#
env:
    # check logic for switchable -- this appears to get exported
    - TEST_OVER_DI=true
    
sudo: required

services:
    - docker
    
before_install:
#    - if: env(TEST_OVER_DI) IS present AND env(TEST_OVER_DI) = true
#        - echo "TEST_OVER_DI engaged."
#    # There does NOT appear to be an else reference IMI
#    - if: !( env(TEST_OVER_DI) IS present)) OR !(env(TEST_OVER_DI) = true)
#        - echo "NOT TEST_OVER_DI"
    # Use the YAML pipe to process over multi-line entries
    # << https://stackoverflow.com/questions/38789253/running-script-conditionally-does-not-work-in-travis-yml-why
# No joy << syntax error near unexpected token `('    
#    - |
#        if [ env(TEST_OVER_DI) IS present && env(TEST_OVER_DI) = true ]; then
#            echo "TEST_OVER_DI engaged."
#        else
#            echo "TEST_OVER_DI inactive"
#        fi
# No joy
#    - |
#        if [ ${TEST_OVER_DI} IS present && ${TEST_OVER_DI} == true ]; then
#            echo "TEST_OVER_DI engaged."
#        else
#            echo "TEST_OVER_DI inactive"
#        fi
# Read defined (not zero) and eq true, else not
    - |
        if [ ! -z ${TEST_OVER_DI} ] && [ ${TEST_OVER_DI} == true ]; then
            echo "TEST_OVER_DI engaged."
        else
            echo "TEST_OVER_DI inactive"
        fi
        
    - docker --version
    #- echo "ENV GIT_SHA ${TRAVIS_COMMIT}" >> Dockerfile
# Useless
#    - echo "ENV GIT_SHA contents? ~:"
    # TRAVIS_COMMIT value usefull if script needs to build and push new docker images.
    # (unused here, currently)
    - echo "ENV GIT_SHA ${TRAVIS_COMMIT}"
#    - echo "...and back to original TI config..."

# TEST -- if we're running from DOCKER do we really need to setup python references here IMI
# Commenting these and other potentially unused segments ATT
# Note:  if No language references defined, system defaults to Ruby -- let the python ref remain.
# (even though unused if execution occurs down in docker level)
language: python
python:
  - "3.6"

install:
    # Pulling in docker image without || true -- want it to fail if not there.
    - export BBNQConda_DI="merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018"
    
    # Sample logic to see if we can determine pull needs or not
    # Sadly -- this did NOT work as expected (as it does under normal shells)
    # Could this be that we don't have a complete linux system here, currently,
    # and still need to explode out a base linux environment for Travis IMI
#    - export TGT_DI=`docker images | grep ${BBNQConda_DI}`
#    - echo ''; if [ -z "${BBNQConda_DI}" ]; then echo "Docker cache missed -- ${BBNQConda_DI} pull pending..." ; docker pull ${BBNQConda_DI}; else echo "Docker cache hit -- ${BBNQConda_DI} docked and ready..."; fi
    # test the image display -- anything IMI -- Nope  docker cache appears empty
    # upon entry -- hence dynamic load logic pointless; just load it
    #- docker images
    
#    - echo "Pulling in BBNQConda docker image via ~:"
##    - docker pull merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018
    # Popping constant pull back in
    - docker pull ${BBNQConda_DI}
    
  # Setup anaconda. See http://conda.pydata.org/docs/travis.html

#  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
#  - bash miniconda.sh -b -p $HOME/miniconda
#  - export PATH="$HOME/miniconda/bin:$PATH"
#  - export BBN_MEAS_FILE="$PWD/test/test_measure.yml"
#  - echo "Measure file at $BBN_MEAS_FILE"
#  - hash -r
#  - conda config --set always_yes yes --set changeps1 no
#  - conda update -q conda
#  # Useful for debugging any issues with conda
#  - conda info -a
#
#  # Create conda environment with dependencies
#  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy scipy matplotlib h5py pandas networkx cffi bokeh jupyter future psutil
#  - source activate test-environment
#  - export GIT_LFS_SKIP_SMUDGE=1
#  - pip install git+https://github.com/BBN-Q/Adapt.git
#  - pip install git+https://github.com/BBN-Q/QGL.git
#  - pip install tqdm pyvisa coveralls ruamel.yaml watchdog scikit-learn pyusb
#  - export GIT_LFS_SKIP_SMUDGE=0
#  - conda install -c ecpy atom;
#  - export PYTHONPATH=$PYTHONPATH:$PWD/src

    # Defining pip install commands for use in the docker session
    # Note -- script test was using direct clone, then walking the installation
    # to do pip install, documentation rendereing and such.
    #
    # Define dependent/sibling repository modules to PiP load prior to testing.
    - export TGT_PIPLOADS="pip install git+https://github.com/BBN-Q/Adapt.git; echo ''; echo '# ---'; pip install git+https://github.com/BBN-Q/QGL.git"
    # the utf8 settings are required for documentation rendering logic.
    - export DI_ENV_VALS="-e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8"
    
script:
#  - coverage run -m unittest discover -v test

# UnNecessary
#    - echo ""; echo "#----- Invoking Docker image run..."
#    - docker run -v $PWD:/root/Travis -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018 coverage run -m unittest discover -v test
#    - docker run -v $PWD:/root/Travis -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018 which conda; which python; python -m unittest discover -v test
#  alternate calls drived from : https://docs.travis-ci.com/user/docker/
# keep the multi-command semicolons within the quotes.
#
#    - docker run -v $PWD:/root/TravisT -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018 /bin/sh -c "source ~/.bashrc; cd ~/TravisT; pwd; which conda; which python; python -m unittest discover -v test"
# Added TGT_PIPINSTS reference
#    - docker run -v $PWD:/root/TravisT -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018 /bin/sh -c "source ~/.bashrc; ${TGT_PIPLOADS}; cd ~/TravisT; pwd; which conda; which python; python -m unittest discover -v test"
# Previous successfully pip loaded QGL and Adapt -- started to run and couldn't find Auspex -- Doht -- add the pip install -e . next
#    - docker run -v $PWD:/root/TravisT -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018 /bin/sh -c "source ~/.bashrc; which conda; which python; ${TGT_PIPLOADS}; cd ~/TravisT; pwd; echo 'Pip Installing Auspex test directory...'; pip install -e .; python -m unittest discover -v test"
# Previous worked; simplification one follows:
#    - docker run -v $PWD:/root/TravisT -e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8 ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; which conda; which python; ${TGT_PIPLOADS}; cd ~/TravisT; pwd; echo 'Pip Installing Auspex test directory...'; pip install -e .; python -m unittest discover -v test"
# Previous worked; simplification two follows (note condainfo will show environment setting -- how to show BBNQConda v IMI)
#    - docker run -v $PWD:/root/RepoCDir ${DI_ENV_VALS} ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; conda info; conda list; python --version; echo ''; echo '# --- PIP loading dependency mods...'; ${TGT_PIPLOADS}; cd ~/RepoCDir; pwd; echo ''; echo '# --- Pip Installing repo clone source...'; pip install -e .; echo ''; echo '# --- Unittest begin...'; python -m unittest discover -v test"
# Previous worked; adjusting console commentary -- simplif three
#    - docker run -v $PWD:/root/RepoCDir ${DI_ENV_VALS} ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; echo ''; echo '# --- DI Run-Time info:'; python --version; echo ''; conda info; conda list; echo ''; echo '# --- PIP loading dependency mods...'; ${TGT_PIPLOADS}; cd ~/RepoCDir; pwd; echo ''; echo '# --- Pip Installing repo clone...'; pip install -e .; echo ''; echo '# --- Unittest begin...'; python -m unittest discover -v test"
#    - docker run -v $PWD:/root/RepoCDir ${DI_ENV_VALS} ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; echo ''; echo '# --- DI Run-Time info:'; python --version; echo ''; conda info; conda list; echo ''; echo '# --- PIP loading dependency mods...'; ${TGT_PIPLOADS}; cd ~/RepoCDir; echo ''; echo '# --- Pip Installing repo clone...'; pwd; pip install -e .; echo ''; echo '# --- Unittest begin...'; python -m unittest discover -v test"
# log text refinement five   
    - docker run -v $PWD:/root/RepoCDir ${DI_ENV_VALS} ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; echo ''; echo '# --- DI Run-Time info:'; python --version; conda info; conda list; echo ''; echo '# --- PIP loading dependency mods...'; ${TGT_PIPLOADS}; cd ~/RepoCDir; echo ''; echo '# --- Pip Installing repo clone...'; pwd; pip install -e .; echo ''; echo '# --- Unittest begin...'; python -m unittest discover -v test"
    
    
after_script:
  - coveralls

# necessary to run on new container-based infrastructure
#sudo: false

# Commenting out PIP cache
cache:
  directories:
    - $HOME/download
#    - $HOME/.cache/pip
