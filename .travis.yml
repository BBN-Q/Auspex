# Comment delta to trigger Travis CI build over unchanged branch logic.

# .travis.yml file based on:
# https://gist.github.com/dan-blanchard/7045057

# Original derivation notes, above, deriving docker image references from
# the following: 
# https://giorgos.sealabs.net/build-and-test-against-docker-images-in-travis.html
#
env:
    # These values appear to get exported; hence can process with standard
    # shell mechanisms.
    #
    # Defines test logic switchs
    #    TEST_OVER_DI true >> run over docker image.
    #    TEST_OVER_DI false >> apply original Miniconda test logic.
    #
    # Aside -- boolean sub logic / assignment processing does NOT appear
    # to work on items within the env segment 8-{
    
    # ...so, just manually set the sudo value sets as desired (options false, required, true)
    # SUDO_VAL={false | required | true}

    # Uncomment the the environment value set want to run;
    # note, more than one set active spawns multiple, simultaneous builds.
    #
    - TEST_OVER_DI=true  SUDO_VAL=false
    - TEST_OVER_DI=false SUDO_VAL=false

    
    # could space delimiters work here IMI
    # - SERVICES_VAL="docker"
    
# the sudo services combination appears to invoke a start for each item rendered
# That said -- it does NOT appear to be required for the direct run over 
# docker image use-case (infact it may well be already running in the background)
#
sudo:   ${SUDO_VAL}

# Logical management of Sudo and services definitions does NOT appear to work.
# Moreover, services were NOT defined in the original logic, and it does NOT
# appear to be a requirement for our DI run use-case, so just leaving it out for-now.
#
#services:
#    - docker

   
before_install:
    # Use the YAML pipe to process over multi-line entries
    # << https://stackoverflow.com/questions/38789253/running-script-conditionally-does-not-work-in-travis-yml-why
    # This works -- Read defined (not zero) and eq true, else not
    - |
        if [ ! -z ${TEST_OVER_DI} ] && [ ${TEST_OVER_DI} == true ]; then
            #
            echo "TEST_OVER_DI engaged."
            docker --version
            echo "ENV GIT_SHA ${TRAVIS_COMMIT}"
            #
        else
            echo "TEST_OVER_DI inactive"
        fi
        
    - echo "Travis PWD [${PWD}]"
    # Manually write script, to repo clone directory, which introspects
    # conda-meta file data;  use this to reveal the Conda "installed_by"
    # shell file name[s]
    # (aside -- this should be available on both DockerImage and MiniConda modes)
    - |
        echo ''
        export LCI_SH=./listCondaInstaller.sh

        if [ ! -f ${LCI_SH} ]; then

           echo "Rendering ${LCI_SH}..."
           echo "#\!/bin/bash"                         >  ${LCI_SH}
           echo "echo ''"                              >> ${LCI_SH}
           echo "export SH_NAME=\$0"                   >> ${LCI_SH}
           echo "export TGT_KEY=\${CONDA_PREFIX}"      >> ${LCI_SH}
           echo "if [ ! -z \${TGT_KEY} ]; then"        >> ${LCI_SH}
           echo "   echo \"# --- \${SH_NAME} :: Session \${TGT_KEY} elements installed by:\""                                  >> ${LCI_SH}
           echo "   grep -o '\"installed_by\": *\"[^\"]*\"' \${TGT_KEY}/conda-meta/*.json | grep -o '\"[^\"]*\"$' | sort -u"   >> ${LCI_SH}
           echo "else"                                 >> ${LCI_SH}
           echo "   echo \"# --- \${SH_NAME} :: NoOp << CONDA_PREFIX undefined << '\${TGT_KEY}'\""                             >> ${LCI_SH}
           echo "fi"                                   >> ${LCI_SH}
           echo "echo ''"                              >> ${LCI_SH}

           chmod u+x ${LCI_SH}

        else
           echo "Skipped ${LCI_SH} rendering (already exists)"
        fi

        ls -l ${LCI_SH}
        echo ''


# TEST -- if we're running from DOCKER do we really need to setup python references here IMI
# Commenting these and other potentially unused segments ATT
# Note:  if No language references defined, system defaults to Ruby -- let the python ref remain.
# (even though unused if execution occurs down in docker level)
language: python

python:
    - "3.6"

install:
    # Pull in the install switch logic (BBNQConda example and original MiniConda)
    # Use the YAML pipe to process over multi-line entries
    - |
        if [ ! -z ${TEST_OVER_DI} ] && [ ${TEST_OVER_DI} == true ]; then
            
            echo "# --- Install setting up test over BBNQConda Docker Image..."
            
            # Pulling in docker image without || true -- want it to fail if not there.
            export BBNQConda_DI="merlinbeast/bbnq:bbnqconda_centos7_4_bbnq_pylib_v1.0.1_19.12.2018"
            
            
            # Sample logic to determine if we need to pull an image or not does 
            # NOT appear to work as the docker images call returns empty set after 
            # initialization.
            # - docker images
            
            # Popping constant pull back in
            docker pull ${BBNQConda_DI}

            # Defining pip install commands for use in the docker session
            # Note -- script test was using direct clone, then walking the installation
            # to do pip install, documentation rendereing and such.
            #
            # Define dependent/sibling repository modules to PiP load prior to testing.
            export TGT_PIPLOADS="pip install git+https://github.com/BBN-Q/Adapt.git; echo ''; echo '# ---'; pip install git+https://github.com/BBN-Q/QGL.git"
            # the utf8 settings are required for documentation rendering logic.
            export DI_ENV_VALS="-e BBN_MEAS_FILE=test/test_measure.yml -e LC_ALL=en_US.utf8 -e LANG=en_US.utf8"

        else
        
            echo "# --- Install setting up base MiniConda Image..."
            
            # Original Miniconda logic here
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -p $HOME/miniconda
            export PATH="$HOME/miniconda/bin:$PATH"
            export BBN_MEAS_FILE="$PWD/test/test_measure.yml"
            echo "Measure file at $BBN_MEAS_FILE"
            hash -r
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda

            # Reveal conda element install shell[s]
            ${LCI_SH}

            # Useful for debugging any issues with conda
            conda info -a

            echo "# --- Install enriching MiniConda Image for repo test..."

            # Create conda environment with dependencies
            conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy scipy matplotlib h5py pandas networkx cffi bokeh jupyter future psutil
            source activate test-environment
            export GIT_LFS_SKIP_SMUDGE=1
            pip install git+https://github.com/BBN-Q/Adapt.git
            pip install git+https://github.com/BBN-Q/QGL.git
            pip install tqdm pyvisa coveralls ruamel.yaml watchdog scikit-learn pyusb
            export GIT_LFS_SKIP_SMUDGE=0
            conda install -c ecpy atom;
            export PYTHONPATH=$PYTHONPATH:$PWD/src
            
        fi

    
script:
    # Pull in the script switch logic (BBNQConda example and original MiniConda)
    # Use the YAML pipe to process over multi-line entries
    - |
        if [ ! -z ${TEST_OVER_DI} ] && [ ${TEST_OVER_DI} == true ]; then
            
            echo "# --- Script invoking test over BBNQConda Docker Image..."
            
            docker run -v $PWD:/root/RepoCDir ${DI_ENV_VALS} ${BBNQConda_DI} /bin/sh -c "source ~/.bashrc; echo ''; echo '# --- DI Run-Time info:'; python --version; conda info; conda list; echo ''; echo '# --- PIP loading dependency mods...'; ${TGT_PIPLOADS}; cd ~/RepoCDir; echo ''; echo '# --- Pip Installing repo clone...'; pwd; pip install -e .; echo ''; ${LCI_SH}; echo '# --- Unittest begin...'; python -m unittest discover -v test"

        else
        
            echo "# --- Script invoking test over MiniConda build..."
            
            # Original test invocaton command.
            coverage run -m unittest discover -v test

        fi
    
    
after_script:
  - coveralls

# necessary to run on new container-based infrastructure
#sudo: false

# Commenting out PIP cache
cache:
  directories:
    - $HOME/download
    - $HOME/.cache/pip
